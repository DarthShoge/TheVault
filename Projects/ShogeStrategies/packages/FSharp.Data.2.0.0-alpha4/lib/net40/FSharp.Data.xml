<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.Data</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Csv.CsvFile.Parse(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Parses the specified CSV content
</summary>
</member>
<member name="M:FSharp.Data.Csv.CsvFile.Load(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Loads CSV from the specified uri
</summary>
</member>
<member name="M:FSharp.Data.Csv.CsvFile.Load(System.IO.TextReader,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Loads CSV from the specified reader
</summary>
</member>
<member name="M:FSharp.Data.Csv.CsvFile.Load(System.IO.Stream,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Loads CSV from the specified stream
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Csv.CsvFile.AsyncLoad(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Loads CSV from the specified uri asynchronously
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Csv.CsvFile">
<summary>
 Represents a CSV file. The lines are read on demand from &apos;reader&apos;.
 Columns are delimited by one of the chars passed by &apos;separators&apos; (defaults to just &apos;,&apos;), and
 to escape the separator chars, the &apos;quote&apos; character will be used (defaults to &apos;&quot;&apos;).
 If &apos;hasHeaders&apos; is true (the default), the first line read by &apos;reader&apos; will not be considered part of data.
 If &apos;ignoreErrors&apos; is true (the default is false), rows with a different number of columns from the header row
 (or the first row if headers are not present) will be ignored
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Csv.CsvRow.Item(System.String)">
<summary>
 Gets a column by name
</summary>
</member>
<member name="P:FSharp.Data.Csv.CsvRow.Item(System.Int32)">
<summary>
 Gets a column by index
</summary>
</member>
<member name="P:FSharp.Data.Csv.CsvRow.Columns">
<summary>
 The columns of the row
</summary>
</member>
<member name="M:FSharp.Data.Csv.CsvRow.GetColumn(System.String)">
<summary>
 Gets a column by name
</summary>
</member>
<member name="M:FSharp.Data.Csv.CsvRow.GetColumn(System.Int32)">
<summary>
 Gets a column by index
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Csv.CsvRow">
<summary>
 Represents a CSV row
</summary>
</member>
<member name="M:FSharp.Data.Csv.Extensions.op_Dynamic(FSharp.Data.Csv.CsvRow,System.String)">
<summary>
 Get column of a CsvRow
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Csv.Extensions">
<summary>
 Unsafe extension methods that can be used to work with CsvRow in a less safe, but shorter way.
 This module also provides the dynamic operator.
</summary>
</member>
<member name="M:FSharp.Data.FreebaseOperators.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
<summary>
 Synonym for LINQ&apos;s Where
 Included so you don&apos;t have to open System.LINQ to use the queries
</summary>
</member>
<member name="M:FSharp.Data.FreebaseOperators.Count``1(System.Linq.IQueryable{``0})">
<summary>
 Synonym for LINQ&apos;s Count
 Included so you don&apos;t have to open System.LINQ to use the queries
</summary>
</member>
<member name="M:FSharp.Data.FreebaseOperators.ApproximateCount``1(System.Linq.IQueryable{``0})">
<summary>
 A Freebase query operation returning an approximate count of the items satisfying a query.
</summary>
</member>
<member name="M:FSharp.Data.FreebaseOperators.ApproximatelyOneOf(System.String,System.String[])">
<summary>
 A Freebase query operation that represents approximately matching one of the given strings. See http://www.freebase.com/docs/mql/ch03.html#directives.
</summary>
</member>
<member name="M:FSharp.Data.FreebaseOperators.ApproximatelyMatches(System.String,System.String)">
<summary>
 A Freebase query operation that represents a perl-style match of a string, e.g. &quot;book club&quot;, &quot;book*&quot;, &quot;*book&quot;, &quot;*book*&quot;, &quot;^book&quot;, &quot;book$&quot;, &quot;* book *&quot;, &quot;book-club&quot;, &quot;book\-club&quot;. See http://www.freebase.com/docs/mql/ch03.html#directives.
</summary>
</member>
<member name="T:FSharp.Data.FreebaseOperators">
<summary>
 Extension members for operations permitted in queries of the Freebase service
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Json.JsonValue.Parse(System.String,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Parses the specified JSON string
</summary>
</member>
<member name="M:FSharp.Data.Json.JsonValue.Load(System.String,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Loads JSON from the specified uri
</summary>
</member>
<member name="M:FSharp.Data.Json.JsonValue.Load(System.IO.TextReader,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Loads JSON from the specified reader
</summary>
</member>
<member name="M:FSharp.Data.Json.JsonValue.Load(System.IO.Stream,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Loads JSON from the specified stream
</summary>
</member>
<member name="M:FSharp.Data.Json.JsonValue.AsyncLoad(System.String,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Loads JSON from the specified uri  asynchronously
</summary>
</member>
<member name="T:FSharp.Data.Json.JsonValue">
<summary>
 Represents a JSON value. Large numbers that do not fit in the 
 Decimal type are represented using the Float case, while
 smaller numbers are represented as decimals to avoid precision loss.
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.op_Dynamic(FSharp.Data.Json.JsonValue,System.String)">
<summary>
 Get property of a JSON object (assuming that the value is an object)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.GetProperty(FSharp.Data.Json.JsonValue,System.String)">
<summary>
 Get property of a JSON object. Fails if the value is not an object
 or if the property is not present
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.TryGetProperty(FSharp.Data.Json.JsonValue,System.String)">
<summary>
 Try get property of a JSON object. Returns None if the value is not
 an object or if the property is not present.
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.get_Properties(FSharp.Data.Json.JsonValue)">
<summary>
 Get a sequence of key-value pairs representing the properties of an object
 (assuming that the value is an object)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.get_InnerText(FSharp.Data.Json.JsonValue)">
<summary>
 Get inner text of an element - this includes just string nodes and
 string nodes in an array (e.g. multi-line string represented as array)
 (assuming that the value is a string or array of strings)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsGuid(FSharp.Data.Json.JsonValue)">
<summary>
 Get the guid value of an element (assuming that the value is a guid)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsDateTime(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get the datetime value of an element (assuming that the value is a string
 containing well-formed ISO date or MSFT JSON date)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsBoolean(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get the boolean value of an element (assuming that the value is a boolean)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsFloat(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo},Microsoft.FSharp.Core.FSharpOption{System.String[]})">
<summary>
 Get a number as a float (assuming that the value is convertible to a float)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsDecimal(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get a number as a decimal (assuming that the value fits in decimal)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsInteger64(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get a number as a 64-bit integer (assuming that the value fits in 64-bit integer)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsInteger(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get a number as an integer (assuming that the value fits in integer)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsString(FSharp.Data.Json.JsonValue,Microsoft.FSharp.Core.FSharpOption{System.Globalization.CultureInfo})">
<summary>
 Get the string value of an element (assuming that the value is a scalar)
 Returns the empty string for JsonValue.Null
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.GetEnumerator(FSharp.Data.Json.JsonValue)">
<summary>
 Get all elements of a JSON object (assuming that the value is an array)
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.get_Item(FSharp.Data.Json.JsonValue,System.String)">
<summary>
 Assuming the value is an object, get value with the specified name
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.get_Item(FSharp.Data.Json.JsonValue,System.Int32)">
<summary>
 Assuming the value is an array, get the value at a specified index
</summary>
</member>
<member name="M:FSharp.Data.Json.Extensions.JsonValue.AsArray(FSharp.Data.Json.JsonValue)">
<summary>
 Get all elements of a JSON object (assuming that the value is an array)
</summary>
</member>
<member name="T:FSharp.Data.Json.Extensions">
<summary>
 Unsafe extension methods that can be used to work with JsonValue in a less safe, but shorter way.
 This module also provides the dynamic operator.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.CsvFile`1.Rows">
<summary>
 The rows with data
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.CsvFile`1.Headers">
<summary>
 The names of the columns
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvFile`1.Truncate(System.Int32)">
<summary>
 Returns a csv that when enumerated returns at most N rows.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvFile`1.TakeWhile(System.Func{`0,System.Boolean})">
<summary>
 Returns a csv that, when iterated, yields rowswhile the given predicate
 returns &lt;c&gt;true&lt;/c&gt;, and then returns no further rows.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvFile`1.Take(System.Int32)">
<summary>
 Returns a new csv with only the first N rows of the underlying csv.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvFile`1.SkipWhile(System.Func{`0,System.Boolean})">
<summary>
 Returns a csv that, when iterated, skips rows while the given predicate returns
 &lt;c&gt;true&lt;/c&gt;, and then yields the remaining rows.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvFile`1.Skip(System.Int32)">
<summary>
 Returns a csv that skips N rows and then yields the remaining rows.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvFile`1.SaveToString(Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Char})">
<summary>
 Saves CSV to a string
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvFile`1.Save(System.String,Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Char})">
<summary>
 Saves CSV to the specified file
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvFile`1.Save(System.IO.Stream,Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Char})">
<summary>
 Saves CSV to the specified stream
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvFile`1.Save(System.IO.TextWriter,Microsoft.FSharp.Core.FSharpOption{System.Char},Microsoft.FSharp.Core.FSharpOption{System.Char})">
<summary>
 Saves CSV to the specified writer
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvFile`1.Filter(System.Func{`0,System.Boolean})">
<summary>
 Returns a new csv containing only the rows for which the given predicate returns &quot;true&quot;.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.CsvFile`1.Cache">
<summary>
 Returns a new csv with the same rows as the original but which guarantees
 that each row will be only be read and parsed from the input at most once.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.CsvFile`1">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.IJsonDocument">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.JsonConversions">
<summary>
 Conversions from JsonValue to string/int/int64/decimal/float/boolean/datetime/guid options
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.JsonDocument.Create(FSharp.Data.Json.JsonValue)">
<summary>
 Creates a JsonDocument representing the specified value
</summary>
</member>
<member name="T:FSharp.Data.Runtime.JsonDocument">
<summary>
 [omit]
 Underlying representation of the generated JSON types
</summary>
</member>
<member name="M:FSharp.Data.Runtime.JsonRuntime.TryGetValueByTypeTag``1(FSharp.Data.Runtime.IJsonDocument,System.String,System.String,System.Func{FSharp.Data.Runtime.IJsonDocument,``0})">
<summary>
 Returns a single or no value by tag type
</summary>
</member>
<member name="M:FSharp.Data.Runtime.JsonRuntime.TryGetPropertyUnpacked(FSharp.Data.Runtime.IJsonDocument,System.String)">
<summary>
 Get optional json property
</summary>
</member>
<member name="M:FSharp.Data.Runtime.JsonRuntime.TryGetArrayChildByTypeTag``1(FSharp.Data.Runtime.IJsonDocument,System.String,System.String,System.Func{FSharp.Data.Runtime.IJsonDocument,``0})">
<summary>
 Returns single or no value from an array matching the specified tag
</summary>
</member>
<member name="M:FSharp.Data.Runtime.JsonRuntime.GetPropertyPacked(FSharp.Data.Runtime.IJsonDocument,System.String)">
<summary>
 Get json property and wrap in json document
</summary>
</member>
<member name="M:FSharp.Data.Runtime.JsonRuntime.GetNonOptionalValue``1(System.String,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{FSharp.Data.Json.JsonValue})">
<summary>
 Operation that extracts the value from an option and reports a meaningful error message when the value is not there
 If the originalValue is a scalar, for missing strings we return &quot;&quot;, and for missing doubles we return NaN
 For other types an error is thrown
</summary>
</member>
<member name="M:FSharp.Data.Runtime.JsonRuntime.GetArrayChildrenByTypeTag``1(FSharp.Data.Runtime.IJsonDocument,System.String,System.String,System.Func{FSharp.Data.Runtime.IJsonDocument,``0})">
<summary>
 Returns all array values that match the specified tag
 (Follows the same pattern as ConvertXyz functions above)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.JsonRuntime.GetArrayChildByTypeTag(FSharp.Data.Runtime.IJsonDocument,System.String,System.String)">
<summary>
 Returns a single array children that matches the specified tag
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.JsonRuntime.ConvertOptionalProperty``1(FSharp.Data.Runtime.IJsonDocument,System.String,System.Func{FSharp.Data.Runtime.IJsonDocument,``0})">
<summary>
 Get optional json property and convert to a specified type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.JsonRuntime.ConvertArray``1(FSharp.Data.Runtime.IJsonDocument,System.Func{FSharp.Data.Runtime.IJsonDocument,``0})">
<summary>
 Converts JSON array to array of target types
</summary>
</member>
<member name="T:FSharp.Data.Runtime.JsonRuntime">
<summary>
 [omit]
 Static helper methods called from the generated code
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.ReentrantEnumerable`1">
<summary>
 An enumerable that will return elements from the &apos;firstSeq&apos; first time it
 is accessed and then will call &apos;nextSeq&apos; each time for all future GetEnumerator calls
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.TextConversions.AsString(System.String)">
<summary>
 Turns empty or null string value into None, otherwise returns Some
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.TextConversions.AsFloat(System.String[],System.Boolean,System.IFormatProvider,System.String)">
<summary>
 if useNoneForMissingValues is true, NAs are returned as None, otherwise Some Double.NaN is used
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.TextConversions.AsDateTime(System.IFormatProvider,System.String)">
<summary>
 Parse date time using either the JSON milliseconds format or using ISO 8601
 that is, either &quot;\/Date(&lt;msec-since-1/1/1970&gt;)\/&quot; or something
 along the lines of &quot;2013-01-28T00:37Z&quot;
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.TextConversions">
<summary>
 Conversions from string to string/int/int64/decimal/float/boolean/datetime/guid options
</summary>
</member>
<member name="M:FSharp.Data.Runtime.TextRuntime.OptionToNullable``1(Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 Turn an F# option type Option&lt;&apos;T&gt; containing a primitive 
 value type into a .NET type Nullable&lt;&apos;T&gt;
</summary>
</member>
<member name="M:FSharp.Data.Runtime.TextRuntime.NullableToOption``1(System.Nullable{``0})">
<summary>
 Turn a .NET type Nullable&lt;&apos;T&gt; to an F# option type Option&lt;&apos;T&gt;
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.TextRuntime.GetNonOptionalValue``1(System.String,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Operation that extracts the value from an option and reports a meaningful error message when the value is not there
 For missing strings we return &quot;&quot;, and for missing doubles we return NaN
 For other types an error is thrown
</summary>
</member>
<member name="M:FSharp.Data.Runtime.TextRuntime.GetCulture(System.String)">
<summary>
 Returns CultureInfo matching the specified culture string
 (or InvariantCulture if the argument is null or empty)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.TextRuntime.AsyncMap``2(Microsoft.FSharp.Control.FSharpAsync{``0},System.Func{``0,``1})">
<summary>
 Turn a sync operation into an async operation
</summary>
</member>
<member name="T:FSharp.Data.Runtime.TextRuntime">
<summary>
 [omit]
 Static helper methods called from the generated code
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.XmlElement.Create(System.Xml.Linq.XElement)">
<summary>
 Creates a XmlElement representing the specified value
</summary>
</member>
<member name="T:FSharp.Data.Runtime.XmlElement">
<summary>
 [omit]
 Underlying representation of the generated XML types
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.XmlRuntime.ConvertAsName``1(FSharp.Data.Runtime.XmlElement,System.String,System.Func{FSharp.Data.Runtime.XmlElement,``0})">
<summary>
 Returns Some if the specified XmlElement has the specified name
 (otherwise None is returned). This is used when the current element
 can be one of multiple elements.
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.XmlRuntime">
<summary>
 [omit]
 Static helper methods called from the generated code
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Caching.ICache`1">
<summary>
 Represents a cache (various implementations are available)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Caching.createInternetFileCache(System.String,System.TimeSpan)">
<summary>
 Creates a cache that stores data in a local file system
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Caching.hashString(System.String)">
<summary>
 Get hash code of a string - used to determine cache file
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Caching.createInMemoryCache``1(System.TimeSpan)">
<summary>
 Creates a cache that uses in-memory collection
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Caching">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.CsvHelpers">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.CsvInference.CsvFile.InferColumnTypes(FSharp.Data.Csv.CsvFile,System.Int32,System.String[],System.IFormatProvider,System.String,System.Boolean,System.Boolean,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc{System.String,System.Type}})">
<summary>
 Infers the types of the columns of a CSV file
 Parameters:
 * inferRows - Number of rows to use for inference. If this is zero, all rows are used
 * missingValues - The set of strings recogized as missing values
 * culture - The culture used for parsing numbers and dates
 * schema - Optional column types, in a comma separated list. Valid types are &quot;int&quot;, &quot;int64&quot;, &quot;bool&quot;, &quot;float&quot;, &quot;decimal&quot;, &quot;date&quot;, &quot;guid&quot;, &quot;string&quot;, &quot;int?&quot;, &quot;int64?&quot;, &quot;bool?&quot;, &quot;float?&quot;, &quot;decimal?&quot;, &quot;date?&quot;, &quot;guid?&quot;, &quot;int option&quot;, &quot;int64 option&quot;, &quot;bool option&quot;, &quot;float option&quot;, &quot;decimal option&quot;, &quot;date option&quot;, &quot;guid option&quot; and &quot;string option&quot;. You can also specify a unit and the name of the column like this: Name (type&amp;lt;unit&amp;gt;). You can also override only the name. If you don&apos;t want to specify all the columns, you can specify by name like this: &apos;ColumnName=type&apos;
 * assumeMissingValues - Assumes all columns can have missing values
 * preferOptionals - when set to true, inference will prefer to use the option type instead of nullable types, double.NaN or &quot;&quot; for missing values
 * getUnitOfMeasure - optional function to resolve Units of Measure
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvInference.getFields(System.Boolean,FSharp.Data.Runtime.StructuralTypes.InferedType,Microsoft.FSharp.Core.FSharpOption{FSharp.Data.Runtime.StructuralTypes.PrimitiveInferedProperty}[])">
<summary>
 Generates the fields for a CSV row. The CSV provider should be
 numerical-friendly, so we do a few simple adjustments.
 When preferOptionals is false:
  
  - Fields of type &apos;int + null&apos; are generated as Nullable&lt;int&gt;
  - Fields of type &apos;int64 + null&apos; are generated as Nullable&lt;int64&gt;
  - Fields of type &apos;float + null&apos; are just floats (and null becomes NaN)
  - Fields of type &apos;decimal + null&apos; are generated as floats too
  - Fields of type &apos;T + null&apos; for any other non-nullable T (bool/date/guid) become option&lt;T&gt;
  - All other types are simply strings.

 When preferOptionals is true:
  
  - All fields of type &apos;T + null&apos; for any type become option&lt;T&gt;, incude strings
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvInference.inferType(Microsoft.FSharp.Core.FSharpFunc{System.String,System.Type},FSharp.Data.Csv.CsvFile,System.Int32,System.String[],System.IFormatProvider,System.String,System.Boolean,System.Boolean)">
<summary>
 Infers the type of a CSV file using the specified number of rows
 (This handles units in the same way as the original MiniCSV provider)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvInference.parseSchemaItem(Microsoft.FSharp.Core.FSharpFunc{System.String,System.Type},System.String,System.Boolean)">
<summary>
 Parse schema specification for column. This can either be a name
 with type or just type: name (typeInfo)|typeInfo.
 If forSchemaOverride is set to true, only Full or Name is returne
 (if we succeed we override the inferred schema, otherwise, we just
 override the header name)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvInference.parseTypeAndUnit``1(Microsoft.FSharp.Core.FSharpFunc{System.String,``0},System.String)">
<summary>
 Parses type specification in the schema for a single column. 
 This can be of the form: type|measure|type&lt;measure&gt;
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.CsvInference.nameToType">
<summary>
 The schema may be set explicitly. This table specifies the mapping
 from the names that users can use to the types used.
</summary>
</member>
<member name="T:FSharp.Data.Runtime.CsvInference">
<summary>
 Structural inference for CSV
</summary>
</member>
<member name="M:FSharp.Data.Runtime.CsvReader.readCsvFile(System.IO.TextReader,System.String,System.Char)">
<summary>
 Lazily reads the specified CSV file using the specified separators
 (Handles most of the RFC 4180 - most notably quoted values and also
 quoted newline characters in columns)
</summary>
</member>
<member name="T:FSharp.Data.Runtime.CsvReader">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseDataConnection.TryGetPropertyById(FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseId,FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseId)">
<summary>
 Get the FreebaseProperty object that gives schema information for a particular property of a particular type.
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseDataConnection.GetInitialDataForSpecificObjectOfType(FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseId,FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseMachineId)">
<summary>
 Get a property bag for a specific object, giving values for the properties of the given type 
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseDataConnection.GetInitialDataForObjectsFromQueryText(Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.String,System.String}},FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseId,System.Int32)">
<summary>
 Get property bags for all the objects of the given type, at the given type
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseDataConnection.GetInitialDataForAllObjectsForPropertyOfObject(FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseMachineId,FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseId,FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseProperty,FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseId,System.Int32)">
<summary>
 Get property bags for all the objects in the specific property relation to a given object, giving values for the properties of the given property type 
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseDataConnection">
<summary>
 Represents a data connection to Freebase
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseDataContext._Create(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
<summary>
 Create a data context
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseDataContext.FSharp-Data-Runtime-Freebase-IFreebaseDataContext-GetDomainCategoryById(System.String)">
<summary>
 Get the object which represents the Freebase domain with the given object id.
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseDataContext">
<summary>
 Contains public entry points called by provided code.
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseDataContextSettings">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseDomain.FSharp-Data-Runtime-Freebase-IFreebaseDomain-GetObjectsOfTypeId(System.String)">
<summary>
 Get all the Freebase objects which have the given Freebase type id.
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseDomain">
<summary>
 Represents the contents of a Freebase namespace
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseDomainCategory.FSharp-Data-Runtime-Freebase-IFreebaseDomainCategory-GetDomainById(System.String)">
<summary>
 Get all the Freebase objects which have the given Freebase type id.
 Get the object which represents the Freebase domain with the given object id.
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseDomainCategory">
<summary>
 Represents the contents of a Freebase namespace
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseIndividuals._GetIndividualsObject(System.Object)">
<summary>
 Get all the Freebase objects which have the given Freebase type id.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseIndividuals.FSharp-Data-Runtime-Freebase-IFreebaseIndividuals-GetIndividualById(System.String,System.String)">
<summary>
 Get all the Freebase objects which have the given type id and object id.
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseIndividuals">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.Freebase.FreebaseObject.Name">
<summary>
 The Name of this item
</summary>
</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.Freebase.FreebaseObject.MainImage">
<summary>
 The main image associated with this item, if any
</summary>
</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.Freebase.FreebaseObject.MachineId">
<summary>
 The machine ID of this item
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.Freebase.FreebaseObject.Blurb">
<summary>
 The Blurb text for this item, if any
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseObject.GetImages">
<summary>
 Images associated with this item. 
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseObject">
<summary>
 Represents a single object drawn from Freebase. 
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebasePropertyBag">
<summary>
 Represents data for a single object
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseSendingQueryArgs">
<summary>
 Arguments of the DataContext.SendingQuery event
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseSendingRequestArgs">
<summary>
 Arguments of the DataContext.SendingRequest event
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.IFreebaseDataContext">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.IFreebaseDomain">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.IFreebaseDomainCategory">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.IFreebaseIndividuals">
<summary>
 [omit]
</summary>
</member>
<member name="P:FSharp.Data.Runtime.Freebase.IFreebaseObject.Name">
<summary>
 The name of this item
</summary>
</member>
<member name="P:FSharp.Data.Runtime.Freebase.IFreebaseObject.MainImage">
<summary>
 The main image associated with this item
</summary>
</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.Freebase.IFreebaseObject.Blurb">
<summary>
 The Blurb text for this item, if any
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Freebase.IFreebaseObject.GetRequiredPropertyByIdTyped``1(System.String,System.String)">
<summary>
 Get a property by identifier, with a strong type, where the property is known to be populated
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Freebase.IFreebaseObject.GetRequiredPropertyById(System.String,System.String)">
<summary>
 Get a property by identifier, where the property is known to be populated
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Freebase.IFreebaseObject.GetPropertyByIdTyped``1(System.String,System.String)">
<summary>
 Get a property by identifier, with a strong type
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Freebase.IFreebaseObject.GetPropertyById(System.String,System.String)">
<summary>
 Get a property by identifier
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Freebase.IFreebaseObject.GetImages">
<summary>
 Images associated with this item. 
</summary>
</member>
<member name="T:FSharp.Data.Runtime.Freebase.IFreebaseObject">
<summary>
 [omit]
 Represents a single object drawn from Freebase. 
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseRequests.Utilities">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseRequests">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="F:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseSchemaConnection.typeIdToType">
<summary>
 Cache policy for type properties. This will be used at runtime.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseSchemaConnection.GetTypeByTypeId(FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseId)">
<summary>
 Get the types that correspond to type id.   The properties of the type are filled in.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseSchemaConnection.GetDomainStructure">
<summary>
 Query the structure of common domains and all the type types in that domain.  Design-time only.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseSchemaConnection.GetDomainCategories">
<summary>
 Query the structure of common domains and all the type types in that domain. 
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseSchemaConnection.GetBlurbByMachineId(FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseMachineId)">
<summary>
 Get the &apos;blurb&apos; text for this topic ID 
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseSchemaConnection.GetBlurbById(FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseId)">
<summary>
 Get the &apos;blurb&apos; text for this topic ID 
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseSchemaConnection.GetAllTypesInDomainSansProperties(FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseId)">
<summary>
 Return all typesin a domain. Design-time only.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseSchemaConnection.GetAllTypesInAllDomainsSansProperties">
<summary>
 Return all types. Design-time only.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseSchemaConnection.GetAllObjectsOfType(FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseType,System.Int32,Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Get property bags for all the objects of the given type, at the given type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseDomainCategory">
<summary>
 The element type returned by GetDomainCategories
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseDomainStructure">
<summary>
 The element type returned by GetDomainStructure.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="F:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseProperty.UnitOfMeasureId">
<summary>
 The unit of measure for the property, if any. e.g. /en/kilometer
</summary>
</member>
<member name="">

</member>
<member name="F:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseProperty.EnumerationId">
<summary>
 Name of the enumeration type. Like /authority/gnis
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseProperty.FSharpPropertyType(FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseSchemaConnection,Microsoft.FSharp.Core.FSharpFunc{FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseProperty,Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Type,System.Boolean}}},Microsoft.FSharp.Core.FSharpFunc{FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseType,Microsoft.FSharp.Core.FSharpOption{System.Type}},Microsoft.FSharp.Core.FSharpFunc{System.Type,System.Type},Microsoft.FSharp.Core.FSharpFunc{System.Type,System.Type},System.Boolean)">
<summary>
 Compute the provided or erased runtime type corresponding to the Freebase property.
 &apos;typeReprFunction&apos; indicates if erasure is happening or not.
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseProperty.FSharpPropertyElementType(FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseSchemaConnection,Microsoft.FSharp.Core.FSharpFunc{FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseProperty,Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.Type,System.Boolean}}},Microsoft.FSharp.Core.FSharpFunc{FSharp.Data.Runtime.Freebase.FreebaseSchema.FreebaseType,Microsoft.FSharp.Core.FSharpOption{System.Type}})">
<summary>
 Compute the provided or erased runtime type corresponding to the Freebase property.
 &apos;typeReprFunction&apos; indicates if erasure is happening or not.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.Freebase.FreebaseSchema.units">
<summary>
 This table of data was downloaded from www.freebase.com itself. 
 See www.freebase.com for term and conditions of use.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.FreebaseSchema.Utilities.dictionaryFromJson(FSharp.Data.Json.JsonValue)">
<summary>
 Represents one object&apos;s values for all the properties of one type id.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseSchema.Utilities">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.FreebaseSchema">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.QueryImplementation.FreebasePropAccess">
<summary>
 The algebra of different supported  qualifications
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.QueryImplementation.formatQueryData(FSharp.Data.Runtime.Freebase.FreebaseDataConnection,FSharp.Data.Runtime.Freebase.QueryImplementation.FreebaseQueryData)">
<summary>
 Format as query text for MQL
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Freebase.QueryImplementation.formatPropAccessCx``1(FSharp.Data.Runtime.Freebase.FreebaseDataConnection,Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,System.String}},System.String,System.String)">
<summary>
 with all the non-compound fields filled in.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.Freebase.QueryImplementation.evaluateOnClientSideWhereNecessary">
<summary>
 TODO: make this a parameter
</summary>
</member>
<member name="T:FSharp.Data.Runtime.Freebase.QueryImplementation">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Freebase.RuntimeConversion">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.Helpers.asOption``1(System.Boolean,``0)">
<summary>
 Convert the result of TryParse to option type
</summary>
</member>
<member name="T:FSharp.Data.Runtime.Helpers">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.HttpUtils">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.IO.UriResolver.Resolve(System.Uri)">
<summary>
 Resolve the absolute location of a file (or web URL) according to the rules
 used by standard F# type providers as described here:
 https://github.com/fsharp/fsharpx/issues/195#issuecomment-12141785

  * if it is web resource, just return it
  * if it is full path, just return it
  * otherwise.

    At design-time:
      * if the user specified resolution folder, use that
      * otherwise use the default resolution folder
    At run-time:
      * if the user specified resolution folder, use that
      * if it is running in F# interactive (config.IsHostedExecution) 
        use the default resolution folder
      * otherwise, use &apos;CurrentDomain.BaseDirectory&apos;
 returns an absolute uri * isWeb flag
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.IO.asyncReadTextAtRuntimeWithDesignTimeRules(System.String,System.String,System.String)">
<summary>
 Returns a TextReader for the uri using the designtime resolution rules
</summary>
</member>
<member name="M:FSharp.Data.Runtime.IO.asyncReadTextAtRuntime(System.Boolean,System.String,System.String,System.String)">
<summary>
 Returns a TextReader for the uri using the runtime resolution rules
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.IO.asyncOpenStream(Microsoft.FSharp.Core.FSharpOption{System.Tuple{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{System.IDisposable,Microsoft.FSharp.Core.Unit}}},FSharp.Data.Runtime.IO.UriResolver,System.Uri)">
<summary>
 Opens a stream to the uri using the uriResolver resolution rules
 It the uri is a file, uses shared read, so it works when the file locked by Excel or similar tools,
 and sets up a filesystem watcher that calls the invalidate function whenever the file changes
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.IO">
<summary>
 [omit]
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.singularize(System.String)">
<summary>
 Return the singular of an English word
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.pluralize(System.String)">
<summary>
 Return the plural of an English word
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.trimHtml(System.String)">
<summary>
 Trim HTML tags from a given string and replace all of them with spaces
 Multiple tags are replaced with just a single space. (This is a recursive 
 implementation that is somewhat faster than regular expression.)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.uniqueGenerator``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.String})">
<summary>
 Given a function to format names (such as `niceCamelName` or `nicePascalName`)
 returns a name generator that never returns duplicate name (by appending an
 index to already used names)
 
 This function is curried and should be used with partial function application:

     let makeUnique = uniqueGenerator nicePascalName
     let n1 = makeUnique &quot;sample-name&quot;
     let n2 = makeUnique &quot;sample-name&quot;

</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.niceCamelName(System.String)">
<summary>
 Turns a given non-empty string into a nice &apos;camelCase&apos; identifier
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.nicePascalName(System.String)">
<summary>
 Turns a given non-empty string into a nice &apos;PascalCase&apos; identifier
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.NameUtils">
<summary>
 Tools for generating nice member names that follow F# &amp; .NET naming conventions
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.Pluralizer">

</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.inferPrimitiveType(System.IFormatProvider,System.String,Microsoft.FSharp.Core.FSharpOption{System.Type})">
<summary>
 Infers the type of a simple string value (this is either
 the value inside a node or value of an attribute)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.inferCollectionType(System.Boolean,System.Collections.Generic.IEnumerable{FSharp.Data.Runtime.StructuralTypes.InferedType})">
<summary>
 Infer the type of the collection based on multiple sample types
 (group the types by tag, count their multiplicity)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.unionRecordTypes(System.Boolean,Microsoft.FSharp.Collections.FSharpList{FSharp.Data.Runtime.StructuralTypes.InferedProperty},Microsoft.FSharp.Collections.FSharpList{FSharp.Data.Runtime.StructuralTypes.InferedProperty})">
<summary>
 Get the union of record types (merge their properties)
 This matches the corresponding members and marks them as `Optional`
 if one may be missing. It also returns subtype of their types.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.unionCollectionTypes(System.Boolean,Microsoft.FSharp.Collections.FSharpMap{FSharp.Data.Runtime.StructuralTypes.InferedTypeTag,System.Tuple{FSharp.Data.Runtime.StructuralTypes.InferedMultiplicity,FSharp.Data.Runtime.StructuralTypes.InferedType}},Microsoft.FSharp.Collections.FSharpMap{FSharp.Data.Runtime.StructuralTypes.InferedTypeTag,System.Tuple{FSharp.Data.Runtime.StructuralTypes.InferedMultiplicity,FSharp.Data.Runtime.StructuralTypes.InferedType}})">
<summary>
 A collection can contain multiple types - in that case, we do keep 
 the multiplicity for each different type tag to generate better types
 (this is essentially the same as `unionHeterogeneousTypes`, but 
 it also handles the multiplicity)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.unionHeterogeneousTypes(System.Boolean,Microsoft.FSharp.Collections.FSharpMap{FSharp.Data.Runtime.StructuralTypes.InferedTypeTag,FSharp.Data.Runtime.StructuralTypes.InferedType},Microsoft.FSharp.Collections.FSharpMap{FSharp.Data.Runtime.StructuralTypes.InferedTypeTag,FSharp.Data.Runtime.StructuralTypes.InferedType})">
<summary>
 Given two heterogeneous types, get a single type that can represent all the
 types that the two heterogeneous types can. For every tag, 
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.subtypeInfered(System.Boolean,FSharp.Data.Runtime.StructuralTypes.InferedType,FSharp.Data.Runtime.StructuralTypes.InferedType)">
<summary>
 Find common subtype of two infered types:
 
  * If the types are both primitive, then we find common subtype of the primitive types
  * If the types are both records, then we union their fields (and mark some as optional)
  * If the types are both collections, then we take subtype of their elements
    (note we do not generate heterogeneous types in this case!)
  * If one type is the Top type, then we return the other without checking
  * If one of the types is the Null type and the other is not a value type
    (numbers or booleans, but not string) then we return the other type.
    Otherwise, we return bottom.

 The contract that should hold about the function is that given two types with the
 same `InferedTypeTag`, the result also has the same `InferedTypeTag`. 

</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.|SubtypePrimitives|_|(FSharp.Data.Runtime.StructuralTypes.InferedType,FSharp.Data.Runtime.StructuralTypes.InferedType)">
<summary>
 Active pattern that calls `subtypePrimitives` on two primitive types
</summary>
</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.StructuralInference.conversionTable">
<summary>
 Find common subtype of two primitive types or `Bottom` if there is no such type.
 The numeric types are ordered as below, other types are not related in any way.

   float :&gt; decimal :&gt; int64 :&gt; int :&gt; bit :&gt; bit0
   float :&gt; decimal :&gt; int64 :&gt; int :&gt; bit :&gt; bit1
   bool :&gt; bit :&gt; bit0
   bool :&gt; bit :&gt; bit1

 This means that e.g. `int` is a subtype of `decimal` and so all `int` values
 are also `decimal` (and `float`) values, but not the other way round.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.typeTag(FSharp.Data.Runtime.StructuralTypes.InferedType)">
<summary>
 Returns a tag of a type - a tag represents a &apos;kind&apos; of type 
 (essentially it describes the different bottom types we have)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.supportsUnitsOfMeasure(System.Type)">
<summary>
 Checks whether a type supports unit of measure
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.supportsNull(FSharp.Data.Runtime.StructuralTypes.InferedType)">
<summary>
 Checks whether a type can have null as a value
</summary>
</member>
<member name="P:FSharp.Data.Runtime.StructuralInference.primitiveTypes">
<summary>
 List of primitive types that can be returned as a result of the inference
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.Seq.pairBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
<summary>
 Merge two sequences by pairing elements for which
 the specified predicate returns the same key

 (If the inputs contain the same keys, then the order
 of the elements is preserved.)
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralInference.Seq">

</member>
<member name="T:FSharp.Data.Runtime.StructuralInference">
<summary>
 Implements type inference for unstructured documents like XML or JSON
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.TypeWrapper.Nullable">
<summary>
 The type T will be converter to type Nullable&lt;T&gt;
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.TypeWrapper.Option">
<summary>
 The type T will be converter to type T option
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.TypeWrapper.None">
<summary>
 No transformation will be made to the type
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.TypeWrapper">
<summary>
 Represents a transformation of a type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.PrimitiveInferedProperty">
<summary>
 Represents type information about a primitive property (used mainly in the CSV provider)
 This type captures the type, unit of measure and handling of missing values (if we
 infer that the value may be missing, we can generate option&lt;T&gt; or nullable&lt;T&gt;)
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.Bit">
<summary>
 Dummy type to represent that only one of &quot;0&quot; and &quot;1&quot; were found
 Will be generated as a &apos;bool&apos;, unless it&apos;s converted to another numerical type
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.Bit1">
<summary>
 Dummy type to represent that only &quot;1&quot; was found
 Will be generated as &apos;int&apos;, unless it&apos;s converted to Bit
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.Bit0">
<summary>
 Dummy type to represent that only &quot;0&quot; was found.
 Will be generated as &apos;int&apos;, unless it&apos;s converted to Bit.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.InferedType">
<summary>
 Represents inferred structural type. A type may be either primitive type
 (one of those listed by `primitiveTypes`) or it can be collection, 
 (named) record and heterogeneous type. We also have `Null` type (which is
 a subtype of all non-primitive types) and universal `Top` type.

  * For collection, we infer the types of different things that appear in 
    the collection and how many times they do.

  * A heterogeneous type (sum type) is simply a choice containing one
    of multiple different possibilities

 Why is collection not simply a list of Heterogeneous types? If we used that
 we would lose information about multiplicity and so we would not be able
 to generate nicer types!
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.StructuralTypes.InferedTypeTag.Code">
<summary>
 Converts tag to string code that can be passed to generated code
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralTypes.InferedTypeTag.ParseCode(System.String)">
<summary>
 Parses code returned by &apos;Code&apos; member (to be used in provided code)
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.InferedTypeTag">
<summary>
 For heterogeneous types, this represents the tag that defines the form
 (that is either primitive type, collection, named record etc.)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.InferedMultiplicity">
<summary>
 For heterogeneous types (types that have multiple possible forms
 such as differently named XML nodes or records and arrays mixed together)
 this type represents the number of occurrences of individual forms
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.InferedProperty">
<summary>
 A property of a record has a name and type and may be optional
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.WorldBankData">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.IWorldBankData">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.TopicCollection`1">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.ITopicCollection">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Topic.Name">
<summary>
 Get the name of the topic 
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Topic.Description">
<summary>
 Get the description of the topic 
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Topic.Code">
<summary>
 Get the WorldBank code of the topic
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.Topic">
<summary>
 Metadata for a Topic
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.ITopic">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.RegionCollection`1">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.IRegionCollection">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Region.RegionCode">
<summary>
 Get the WorldBank code for the region
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Region.Name">
<summary>
 Get the name of the region
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.Region">
<summary>
 Metadata for a Region
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.IRegion">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.CountryCollection`1">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.ICountryCollection">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Country.Region">
<summary>
 Get the region of the country 
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Country.Name">
<summary>
 Get the name of the country 
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Country.Code">
<summary>
 Get the WorldBank code of the country
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Country.CapitalCity">
<summary>
 Get the capital city of the country 
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.Country">
<summary>
 Metadata for a Country
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.ICountry">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.IndicatorsDescriptions">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.IIndicatorsDescriptions">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.Indicators">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.IIndicators">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.WorldBank.IndicatorDescription.Source">
<summary>
 Get the source of the indicator
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.IndicatorDescription.Name">
<summary>
 Get the name of the indicator
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.IndicatorDescription.IndicatorCode">
<summary>
 Get the code for the indicator
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.IndicatorDescription.Description">
<summary>
 Get the description of the indicator
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.IndicatorDescription.Code">
<summary>
 Get the code for the topic of the indicator
</summary>
</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.IndicatorDescription">
<summary>
 Metadata for an Indicator
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Indicator.Years">
<summary>
 Get the years for which the indicator has values
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Indicator.Values">
<summary>
 Get the values for the indicator (without years)
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Indicator.Source">
<summary>
 Get the source of the indicator
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Indicator.Name">
<summary>
 Get the name of the indicator
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Indicator.Item(System.Int32)">
<summary>
 Get a value for a year for the indicator
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Indicator.IndicatorCode">
<summary>
 Get the code for the indicator
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Indicator.Description">
<summary>
 Get the description of the indicator
</summary>
</member>
<member name="P:FSharp.Data.Runtime.WorldBank.Indicator.Code">
<summary>
 Get the code for the country or region of the indicator
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.Indicator">
<summary>
 Indicator data
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="F:FSharp.Data.Runtime.WorldBank.Implementation.ServiceConnection.topics">
<summary>
 At compile time, download the schema
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FSharp.Data.Runtime.WorldBank.Implementation.ServiceConnection.GetDataAsync(System.String,System.String)">
<summary>
 At runtime, download the data
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Data.Runtime.WorldBank.Implementation">
<summary>
 [omit]
</summary>
</member>
<member name="">

</member>
<member name="F:FSharp.Net.FSharp.Net.Http.runningOnMono">
<summary>
 Are we currently running on Mono?
 (Mono does not have the issue with encoding slashes in URLs, so we do not need workaround)
</summary>
</member>
<member name="M:FSharp.Net.Http.RequestString``4(System.String,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{FSharp.Net.RequestBody},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{``3})">
<summary>
 Download an HTTP web resource from the specified URL synchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="M:FSharp.Net.Http.Request``4(System.String,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{FSharp.Net.RequestBody},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{``3})">
<summary>
 Download an HTTP web resource from the specified URL synchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="">

</member>
<member name="M:FSharp.Net.Http.AsyncRequestString``4(System.String,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{FSharp.Net.RequestBody},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{``3})">
<summary>
 Download an HTTP web resource from the specified URL asynchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="M:FSharp.Net.Http.AsyncRequest``4(System.String,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{``1},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{FSharp.Net.RequestBody},Microsoft.FSharp.Core.FSharpOption{``2},Microsoft.FSharp.Core.FSharpOption{System.Net.CookieContainer},Microsoft.FSharp.Core.FSharpOption{``3})">
<summary>
 Download an HTTP web resource from the specified URL asynchronously
 (allows specifying query string parameters and HTTP headers including
 headers that have to be handled specially - such as Accept, Content-Type &amp; Referer)
 The body for POST request can be specified either as text or as a list of parameters
 that will be encoded, and the method will automatically be set if not specified
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Net.Http">
<summary>
 Utilities for working with network via HTTP. Includes methods for downloading 
 resources with specified headers, query parameters and HTTP body
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Net.HttpResponse">
<summary>
 The response returned by an HTTP request
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Net.ResponseBody">
<summary>
 The response body returned by an HTTP request
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FSharp.Net.RequestBody">
<summary>
 The body to send in an HTTP request
</summary>
</member>
<member name="">

</member>
<member name="T:System.AssemblyVersionInformation">

</member>
</members>
</doc>
